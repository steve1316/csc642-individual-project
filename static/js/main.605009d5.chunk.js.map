{"version":3,"sources":["Pages/Survey/Survey.jsx","components/MapComponent.js","Pages/Results/Results.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","position","left","top","transform","boxShadow","background","margin","formControl","spacing","minWidth","Survey","props","classes","useState","firstName","setFirstName","lastName","setLastName","birthday","setBirthday","heightFT","setHeightFT","heightIN","setHeightIN","streetAddress","setStreetAddress","streetAddressExtra","setStreetAddressExtra","zipCode","setZipCode","city","setCity","state","setState","email","setEmail","checkedTermsAndConditions","setCheckedTermsAndConditions","checkedCaptcha","setCheckedCaptcha","useEffect","sessionStorage","getItem","userData","JSON","parse","console","log","data","Card","className","CardHeader","title","CardContent","onSubmit","e","setItem","stringify","history","push","pathname","Grid","container","direction","justify","alignItems","item","xs","sm","TextField","id","label","type","value","onChange","target","required","variant","textField","InputLabelProps","shrink","style","paddingTop","InputProps","inputProps","min","endAdornment","InputAdornment","helperText","select","defaultValue","map","index","MenuItem","key","sitekey","FormControl","FormControlLabel","control","Checkbox","name","checked","Button","color","disabled","mapStyles","height","MapContainer","google","this","zoom","initialCenter","lat","coordinates","lng","Component","GoogleApiWrapper","apiKey","card","Results","fullAddress","lati","long","Geocode","setApiKey","fromAddress","then","response","results","geometry","location","error","heightMessage","renderResults","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"gWAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,QACPC,SAAU,MACVC,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,wBACXC,UAAW,2DACXC,WAAY,UACZC,OAAQ,aAEVC,YAAa,CACXD,OAAQV,EAAMY,QAAQ,GACtBC,SAAU,SAuSCC,MAnSf,SAAgBC,GACd,IAAMC,EAAUlB,IADK,EAKamB,mBAAS,IALtB,mBAKdC,EALc,KAKHC,EALG,OAMWF,mBAAS,IANpB,mBAMdG,EANc,KAMJC,EANI,OAQWJ,mBAAS,IARpB,mBAQdK,EARc,KAQJC,EARI,OAUWN,mBAAS,GAVpB,mBAUdO,EAVc,KAUJC,EAVI,OAWWR,mBAAS,GAXpB,mBAWdS,EAXc,KAWJC,EAXI,OAaqBV,mBAAS,IAb9B,mBAadW,EAbc,KAaCC,EAbD,OAc+BZ,mBAAS,IAdxC,mBAcda,EAdc,KAcMC,EAdN,OAeSd,mBAAS,IAflB,mBAede,EAfc,KAeLC,EAfK,OAgBGhB,mBAAS,IAhBZ,mBAgBdiB,EAhBc,KAgBRC,EAhBQ,QAiBKlB,mBAAS,IAjBd,qBAiBdmB,GAjBc,MAiBPC,GAjBO,SAmBKpB,mBAAS,IAnBd,qBAmBdqB,GAnBc,MAmBPC,GAnBO,SAqB6CtB,oBAAS,GArBtD,qBAqBduB,GArBc,MAqBaC,GArBb,SAsBuBxB,oBAAS,GAtBhC,qBAsBdyB,GAtBc,MAsBEC,GAtBF,MAyBrBC,qBAAU,WACR,GAAIC,eAAeC,QAAQ,YAAa,CACtC,IAAMC,EAAWC,KAAKC,MAAMJ,eAAeC,QAAQ,aACnDI,QAAQC,IAAI,8BAA+BJ,GAE3C5B,EAAa4B,EAAS7B,WACtBG,EAAY0B,EAAS3B,UACrBG,EAAYwB,EAASzB,UACrBG,EAAYsB,EAASvB,UACrBG,EAAYoB,EAASrB,UACrBG,EAAiBkB,EAASnB,eAC1BG,EAAsBgB,EAASjB,oBAC/BG,EAAWc,EAASf,SACpBG,EAAQY,EAASb,MACjBG,GAASU,EAASX,OAClBG,GAASQ,EAAST,OAClBG,IAA6B,GAC7BE,IAAkB,QAElBO,QAAQC,IAAI,6BAEb,IAGH,IAAMC,GAAO,CACXlC,UAAWA,EACXE,SAAUA,EACVE,SAAUA,EACVE,SAAUA,EACVE,SAAUA,EACVE,cAAeA,EACfE,mBAAoBA,EACpBE,QAASA,EACTE,KAAMA,EACNE,MAAOA,GACPE,MAAOA,GACPE,0BAA2BA,GAC3BE,eAAgBA,IA2ElB,OACE,kBAACW,EAAA,EAAD,CAAMC,UAAWtC,EAAQf,MACvB,kBAACsD,EAAA,EAAD,CAAYC,MAAM,6BAClB,kBAACC,EAAA,EAAD,KACE,0BAAMC,SAAU,SAACC,GAAD,OAfpBd,eAAee,QAAQ,WAAYZ,KAAKa,UAAUT,UAGlDrC,EAAM+C,QAAQC,KAAK,CACjBC,SAAU,WACV5B,MAAO,CACLgB,aAUE,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,GAChF,kBAACqD,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACC,EAAA,EAAD,CAAWC,GAAG,uBAAuBC,MAAM,aAAaC,KAAK,OAAOC,MAAO3D,EAAW4D,SAAU,SAACnB,GAAD,OAAOxC,EAAawC,EAAEoB,OAAOF,QAAQG,UAAQ,EAACC,QAAQ,cAExJ,kBAAChB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACC,EAAA,EAAD,CAAWC,GAAG,sBAAsBC,MAAM,YAAYC,KAAK,OAAOC,MAAOzD,EAAU0D,SAAU,SAACnB,GAAD,OAAOtC,EAAYsC,EAAEoB,OAAOF,QAAQG,UAAQ,EAACC,QAAQ,cAEpJ,kBAAChB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACC,EAAA,EAAD,CACEC,GAAG,qBACHC,MAAM,WACNC,KAAK,OACLC,MAAOvD,EACPwD,SAAU,SAACnB,GAAD,OAAOpC,EAAYoC,EAAEoB,OAAOF,QACtCG,UAAQ,EACR1B,UAAWtC,EAAQkE,UACnBC,gBAAiB,CACfC,QAAQ,OAMhB,kBAACnB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACC,EAAA,EAAD,CACEC,GAAG,sBACHC,MAAM,oBACNC,KAAK,SACLC,MAAOrD,EACPsD,SAAU,SAACnB,GAAD,OAAOlC,EAAYkC,EAAEoB,OAAOF,QACtCM,gBAAiB,CAAEC,QAAQ,GAC3BG,WAAY,CAAEC,WAAY,CAAEC,IAAK,GAAKL,OAAQ,QAASM,aAAc,kBAACC,EAAA,EAAD,CAAgBvF,SAAS,OAAzB,OACrE6E,QAAQ,cAGZ,kBAAChB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACC,EAAA,EAAD,CACEC,GAAG,sBACHC,MAAM,oBACNC,KAAK,SACLC,MAAOnD,EACPoD,SAAU,SAACnB,GAAD,OAAOhC,EAAYgC,EAAEoB,OAAOF,QACtCM,gBAAiB,CAAEC,QAAQ,GAC3BG,WAAY,CAAEC,WAAY,CAAEC,IAAK,GAAKL,OAAQ,QAASM,aAAc,kBAACC,EAAA,EAAD,CAAgBvF,SAAS,OAAzB,OACrE6E,QAAQ,eAKd,kBAAChB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CACEC,GAAG,2BACHC,MAAM,iBACNE,MAAOjD,EACPkD,SAAU,SAACnB,GAAD,OAAO9B,EAAiB8B,EAAEoB,OAAOF,QAC3CG,UAAQ,EACRC,QAAQ,WACRI,MAAO,CAAEnF,MAAO,WAKtB,kBAAC+D,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CACEC,GAAG,iCACHC,MAAM,2DACNE,MAAO/C,EACPgD,SAAU,SAACnB,GAAD,OAAO5B,EAAsB4B,EAAEoB,OAAOF,QAChDI,QAAQ,WACRI,MAAO,CAAEnF,MAAO,WAKtB,kBAAC+D,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACC,EAAA,EAAD,CAAWC,GAAG,qBAAqBC,MAAM,WAAWE,MAAO7C,EAAS8C,SAAU,SAACnB,GAAD,OAAO1B,EAAW0B,EAAEoB,OAAOF,QAAQG,UAAQ,EAACC,QAAQ,cAEpI,kBAAChB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,OAAOE,MAAO3C,EAAM4C,SAAU,SAACnB,GAAD,OAAOxB,EAAQwB,EAAEoB,OAAOF,QAAQG,UAAQ,EAACC,QAAQ,cAEtH,kBAAChB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GACpB,kBAACC,EAAA,EAAD,CAAWC,GAAG,yBAAyBC,MAAM,QAAQiB,WAAW,2BAA2BC,QAAM,EAACC,aAAa,GAAGjB,MAAOzC,GAAO0C,SAAU,SAACnB,GAAD,OAAOtB,GAASsB,EAAEoB,OAAOF,QAAQG,UAAQ,GAlK1K,CACnB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAkH0Be,KAAI,SAAC3D,EAAO4D,GACxB,OACE,kBAACC,EAAA,EAAD,CAAUC,IAAK9D,EAAQ,IAAM4D,EAAOnB,MAAOzC,GACxCA,SAQb,kBAAC6B,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CAAWC,GAAG,0BAA0BC,MAAM,gBAAgBE,MAAOvC,GAAOwC,SAAU,SAACnB,GAAD,OAAOpB,GAASoB,EAAEoB,OAAOF,QAAQG,UAAQ,EAACC,QAAQ,WAAWI,MAAO,CAAEnF,MAAO,WAIvK,kBAAC+D,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAACE,EAAA,EAAD,CAAWC,GAAG,kCAAkCC,MAAM,wBAAwBK,UAAQ,EAACC,QAAQ,WAAWI,MAAO,CAAEnF,MAAO,WAI9H,kBAAC+D,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAW4B,QAAQ,2CAA2CrB,SAvI1E,SAAwBD,GACtB3B,QAAQC,IAAI,kBAAmB0B,GAC/BlC,IAAkB,QAyIZ,kBAACsB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAUC,KAAK,QAAQC,QAASjE,GAA2BsC,SAAU,SAACnB,GAAD,OAAOlB,GAA6BkB,EAAEoB,OAAO0B,UAAUzB,UAAQ,IAC7IL,MAAM,yCAMd,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAGyE,MAAO,CAAEC,WAAY,KACxG,kBAACrB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACZ/B,GACC,kBAACkE,EAAA,EAAD,CAAQ9B,KAAK,SAASK,QAAQ,YAAY0B,MAAM,aAAhD,UAGEjE,GACF,kBAACgE,EAAA,EAAD,CAAQE,UAAQ,EAAC3B,QAAQ,YAAY0B,MAAM,aAA3C,0CAIA,kBAACD,EAAA,EAAD,CAAQE,UAAQ,EAAC3B,QAAQ,YAAY0B,MAAM,aAA3C,4D,wCC1SVE,EAAY,CAChB3G,MAAO,OACP4G,OAAQ,QAIGC,EAAb,uKAEI,OACE,kBAAC,MAAD,CAAKC,OAAQC,KAAKlG,MAAMiG,OAAQE,KAAM,GAAI7B,MAAOwB,EAAWM,cAAe,CAAEC,IAAKH,KAAKlG,MAAMsG,YAAX,KAAgCC,IAAKL,KAAKlG,MAAMsG,YAAX,OACrH,kBAAC,SAAD,CAAQjH,SAAU,CAAEgH,IAAKH,KAAKlG,MAAMsG,YAAX,KAAgCC,IAAKL,KAAKlG,MAAMsG,YAAX,aAJtE,GAAkCE,aAUnBC,6BAAiB,CAC9BC,OAAQ,2CADKD,CAEZT,G,iBChBGjH,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,QACPC,SAAU,MACVC,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,wBACXC,UAAW,2DACXC,WAAY,UACZC,OAAQ,aAEVgH,KAAM,CACJvH,SAAU,QAEZQ,YAAa,CACXD,OAAQV,EAAMY,QAAQ,GACtBC,SAAU,SAqGC8G,MAjGf,SAAiB5G,GACf,IAAMC,EAAUlB,IAEZ8H,EAAc,GACdP,EAAc,CAChBQ,KAAM,EACNC,KAAM,GAyER,OACE,oCACE,kBAAC7D,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,aAAaC,WAAW,SAASzD,QAAS,EAAG0C,UAAWtC,EAAQf,MACtG,kBAACgE,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACX,kBAAClB,EAAA,EAAD,CAAMC,UAAWtC,EAAQ0G,MACvB,kBAACnE,EAAA,EAAD,CAAYC,MAAM,wBAClB,kBAACC,EAAA,EAAD,KA5EV,WACE,GAAIZ,eAAeC,QAAQ,YAAa,CACtC,IAAMC,EAAWC,KAAKC,MAAMJ,eAAeC,QAAQ,aACnDI,QAAQC,IAAI,mBAAoBJ,GAEhC6E,EAAc7E,EAASnB,cAAgB,IAAMmB,EAASb,KAAO,IAAMa,EAASX,MAAQ,IAAMW,EAASf,QACnG+F,IAAQC,UAAU,2CAElBD,IAAQE,YAAYL,GAAaM,MAC/B,SAACC,GAAc,IAAD,EACSA,EAASC,QAAQ,GAAGC,SAASC,SAA1ClB,EADI,EACJA,IAAKE,EADD,EACCA,IACbD,EAAW,KAAWD,EACtBC,EAAW,KAAWC,EACtBpE,QAAQC,IAAIkE,MAEd,SAACkB,GACCrF,QAAQqF,MAAMA,MAIlB,IAAIC,EAAgB,qBAEpB,GAA0B,KAAtBzF,EAASvB,UAAyC,KAAtBuB,EAASrB,SAAiB,CACxD,IAAIF,EAAWuB,EAASvB,SACpBE,EAAWqB,EAASrB,SACE,KAAtBqB,EAASvB,UAAyC,KAAtBuB,EAASrB,WACvCF,EAAW,GAEa,KAAtBuB,EAASvB,UAAyC,KAAtBuB,EAASrB,WACvCA,EAAW,GAEb8G,EAAgBhH,EAAW,OAASE,EAAW,MAGjD,OACE,6BACE,6BACA,2BACE,0CACCqB,EAAS7B,UAAY,IAAM6B,EAAS3B,UAEvC,2BACE,8CADF,WACsC2B,EAASzB,UAE/C,2BACE,4CACCkH,GAEH,2BACE,6CACCzF,EAASnB,cAAgB,IAAMmB,EAASjB,mBAAqB,KAAOiB,EAASb,KAAO,KAAOa,EAASX,MAAQ,IAAMW,EAASf,SAE9H,2BACE,qDADF,qDAGA,2BACE,2CACCe,EAAST,QAKhB,OACE,6BACE,wFAYgBmG,MAIlB,kBAACxE,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACX,kBAAC,EAAD,CAAc8C,YAAaA,QCnGtBqB,MAVf,WACE,OACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/H,IACjC,kBAAC,IAAD,CAAO8H,KAAK,UAAUC,UAAW/H,IACjC,kBAAC,IAAD,CAAO8H,KAAK,WAAWC,UAAWlB,M,QCLxCmB,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.605009d5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Grid, CardHeader, Card, CardContent, TextField, makeStyles, InputAdornment, MenuItem, FormControl, FormControlLabel, Checkbox, Button } from \"@material-ui/core\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100vw\",\r\n    maxWidth: \"75%\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    top: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    boxShadow: \"0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\",\r\n    background: \"#f3f3f3\",\r\n    margin: \"40px auto\"\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120\r\n  }\r\n}));\r\n\r\nfunction Survey(props) {\r\n  const classes = useStyles();\r\n\r\n  // Setting states for the data object for the survey.\r\n\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n\r\n  const [birthday, setBirthday] = useState(\"\");\r\n\r\n  const [heightFT, setHeightFT] = useState(0);\r\n  const [heightIN, setHeightIN] = useState(0);\r\n\r\n  const [streetAddress, setStreetAddress] = useState(\"\");\r\n  const [streetAddressExtra, setStreetAddressExtra] = useState(\"\");\r\n  const [zipCode, setZipCode] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  const [checkedTermsAndConditions, setCheckedTermsAndConditions] = useState(false);\r\n  const [checkedCaptcha, setCheckedCaptcha] = useState(false);\r\n\r\n  // This gets called only once after refreshing or pressing the back button to repopulate the fields with your old information.\r\n  useEffect(() => {\r\n    if (sessionStorage.getItem(\"userData\")) {\r\n      const userData = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n      console.log(\"Found your old data! Data: \", userData);\r\n\r\n      setFirstName(userData.firstName);\r\n      setLastName(userData.lastName);\r\n      setBirthday(userData.birthday);\r\n      setHeightFT(userData.heightFT);\r\n      setHeightIN(userData.heightIN);\r\n      setStreetAddress(userData.streetAddress);\r\n      setStreetAddressExtra(userData.streetAddressExtra);\r\n      setZipCode(userData.zipCode);\r\n      setCity(userData.city);\r\n      setState(userData.state);\r\n      setEmail(userData.email);\r\n      setCheckedTermsAndConditions(false);\r\n      setCheckedCaptcha(false);\r\n    } else {\r\n      console.log(\"You are starting fresh!\");\r\n    }\r\n  }, []);\r\n\r\n  // Every time the textfields are updated, this data object will be updated along with it.\r\n  const data = {\r\n    firstName: firstName,\r\n    lastName: lastName,\r\n    birthday: birthday,\r\n    heightFT: heightFT,\r\n    heightIN: heightIN,\r\n    streetAddress: streetAddress,\r\n    streetAddressExtra: streetAddressExtra,\r\n    zipCode: zipCode,\r\n    city: city,\r\n    state: state,\r\n    email: email,\r\n    checkedTermsAndConditions: checkedTermsAndConditions,\r\n    checkedCaptcha: checkedCaptcha\r\n  };\r\n\r\n  const listOfStates = [\r\n    \"AL\",\r\n    \"AK\",\r\n    \"AZ\",\r\n    \"AR\",\r\n    \"CA\",\r\n    \"CO\",\r\n    \"CT\",\r\n    \"DE\",\r\n    \"FL\",\r\n    \"GA\",\r\n    \"HI\",\r\n    \"ID\",\r\n    \"IL\",\r\n    \"IN\",\r\n    \"IA\",\r\n    \"KS\",\r\n    \"KY\",\r\n    \"LA\",\r\n    \"ME\",\r\n    \"MD\",\r\n    \"MA\",\r\n    \"MI\",\r\n    \"MN\",\r\n    \"MS\",\r\n    \"MO\",\r\n    \"MT\",\r\n    \"NE\",\r\n    \"NV\",\r\n    \"NH\",\r\n    \"NJ\",\r\n    \"NM\",\r\n    \"NY\",\r\n    \"NC\",\r\n    \"ND\",\r\n    \"OH\",\r\n    \"OK\",\r\n    \"OR\",\r\n    \"PA\",\r\n    \"RI\",\r\n    \"SC\",\r\n    \"SD\",\r\n    \"TN\",\r\n    \"TX\",\r\n    \"UT\",\r\n    \"VA\",\r\n    \"WA\",\r\n    \"WV\",\r\n    \"WI\",\r\n    \"WY\"\r\n  ];\r\n\r\n  // This gets called after successfully completing the CAPTCHA.\r\n  function recaptchaCheck(value) {\r\n    console.log(\"Captcha value: \", value);\r\n    setCheckedCaptcha(true);\r\n  }\r\n\r\n  // This gets called after clicking on the button to submit the form\r\n  function submitSurveyForm() {\r\n    // Save data to sessioStorage to account for page refresh to save user's work. Will be cleared when browser/window/tab is closed.\r\n    sessionStorage.setItem(\"userData\", JSON.stringify(data));\r\n\r\n    // Now send page information to Results Page.\r\n    props.history.push({\r\n      pathname: \"/results\",\r\n      state: {\r\n        data\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader title=\"Data Survey for Students\" />\r\n      <CardContent>\r\n        <form onSubmit={(e) => submitSurveyForm(e)}>\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1}>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField id=\"first-name-textfield\" label=\"First Name\" type=\"text\" value={firstName} onChange={(e) => setFirstName(e.target.value)} required variant=\"outlined\" />\r\n            </Grid>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField id=\"last-name-textfield\" label=\"Last Name\" type=\"text\" value={lastName} onChange={(e) => setLastName(e.target.value)} required variant=\"outlined\" />\r\n            </Grid>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField\r\n                id=\"birthday-textfield\"\r\n                label=\"Birthday\"\r\n                type=\"date\"\r\n                value={birthday}\r\n                onChange={(e) => setBirthday(e.target.value)}\r\n                required\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField\r\n                id=\"height-ft-textfield\"\r\n                label=\"Height (optional)\"\r\n                type=\"number\"\r\n                value={heightFT}\r\n                onChange={(e) => setHeightFT(e.target.value)}\r\n                InputLabelProps={{ shrink: true }}\r\n                InputProps={{ inputProps: { min: 0 }, shrink: \"false\", endAdornment: <InputAdornment position=\"end\">ft</InputAdornment> }}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField\r\n                id=\"height-in-textfield\"\r\n                label=\"Height (optional)\"\r\n                type=\"number\"\r\n                value={heightIN}\r\n                onChange={(e) => setHeightIN(e.target.value)}\r\n                InputLabelProps={{ shrink: true }}\r\n                InputProps={{ inputProps: { min: 0 }, shrink: \"false\", endAdornment: <InputAdornment position=\"end\">in</InputAdornment> }}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"street-address-textfield\"\r\n                label=\"Street Address\"\r\n                value={streetAddress}\r\n                onChange={(e) => setStreetAddress(e.target.value)}\r\n                required\r\n                variant=\"outlined\"\r\n                style={{ width: \"80%\" }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id=\"street-address-extra-textfield\"\r\n                label=\"Apartment, suite, unit, building, floor, etc. (optional)\"\r\n                value={streetAddressExtra}\r\n                onChange={(e) => setStreetAddressExtra(e.target.value)}\r\n                variant=\"outlined\"\r\n                style={{ width: \"80%\" }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField id=\"zip-code-textfield\" label=\"ZIP Code\" value={zipCode} onChange={(e) => setZipCode(e.target.value)} required variant=\"outlined\" />\r\n            </Grid>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField id=\"city-textfield\" label=\"City\" value={city} onChange={(e) => setCity(e.target.value)} required variant=\"outlined\" />\r\n            </Grid>\r\n            <Grid item xs={6} sm={3}>\r\n              <TextField id=\"textfield-select-state\" label=\"State\" helperText=\"Please select your state\" select defaultValue=\"\" value={state} onChange={(e) => setState(e.target.value)} required>\r\n                {listOfStates.map((state, index) => {\r\n                  return (\r\n                    <MenuItem key={state + \"-\" + index} value={state}>\r\n                      {state}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={12}>\r\n              <TextField id=\"email-address-textfield\" label=\"Email Address\" value={email} onChange={(e) => setEmail(e.target.value)} required variant=\"outlined\" style={{ width: \"80%\" }} />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={12}>\r\n              <TextField id=\"email-address-confirm-textfield\" label=\"Confirm Email Address\" required variant=\"outlined\" style={{ width: \"80%\" }} />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={12}>\r\n              <ReCAPTCHA sitekey=\"6LcKB7EZAAAAAOnfPRTQWnXMcjhq4AV_hhhsisw_\" onChange={recaptchaCheck} />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={12}>\r\n              <FormControl>\r\n                <FormControlLabel\r\n                  control={<Checkbox name=\"terms\" checked={checkedTermsAndConditions} onChange={(e) => setCheckedTermsAndConditions(e.target.checked)} required />}\r\n                  label=\"I accept the Terms and Conditions\"\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} style={{ paddingTop: 10 }}>\r\n            <Grid item xs={12}>\r\n              {checkedTermsAndConditions ? (\r\n                <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n                  Submit\r\n                </Button>\r\n              ) : checkedCaptcha ? (\r\n                <Button disabled variant=\"contained\" color=\"secondary\">\r\n                  Please accept the terms and conditions\r\n                </Button>\r\n              ) : (\r\n                <Button disabled variant=\"contained\" color=\"secondary\">\r\n                  Please accept the terms and conditions and Captcha\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Survey;\r\n","import React, { Component } from \"react\";\r\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nconst mapStyles = {\r\n  width: \"100%\",\r\n  height: \"100%\"\r\n};\r\n\r\n// Coordinates are passed via props inside the Results page to this component.\r\nexport class MapContainer extends Component {\r\n  render() {\r\n    return (\r\n      <Map google={this.props.google} zoom={14} style={mapStyles} initialCenter={{ lat: this.props.coordinates[\"lati\"], lng: this.props.coordinates[\"long\"] }}>\r\n        <Marker position={{ lat: this.props.coordinates[\"lati\"], lng: this.props.coordinates[\"long\"] }} />\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyBYR-fyWSCdQ3XfZohzXX2adrSyta-qYGo\"\r\n})(MapContainer);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, CardHeader, Card, CardContent, TextField, makeStyles, InputAdornment, MenuItem, FormControl, FormControlLabel, Checkbox, Button } from \"@material-ui/core\";\r\nimport MapContainer from \"../../components/MapComponent\";\r\nimport Geocode from \"react-geocode\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100vw\",\r\n    maxWidth: \"75%\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    top: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    boxShadow: \"0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\",\r\n    background: \"#f3f3f3\",\r\n    margin: \"40px auto\"\r\n  },\r\n  card: {\r\n    maxWidth: \"100%\"\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120\r\n  }\r\n}));\r\n\r\nfunction Results(props) {\r\n  const classes = useStyles();\r\n\r\n  let fullAddress = \"\";\r\n  let coordinates = {\r\n    lati: 0,\r\n    long: 0\r\n  };\r\n\r\n  function renderResults() {\r\n    if (sessionStorage.getItem(\"userData\")) {\r\n      const userData = JSON.parse(sessionStorage.getItem(\"userData\"));\r\n      console.log(\"History's data: \", userData);\r\n\r\n      fullAddress = userData.streetAddress + \" \" + userData.city + \" \" + userData.state + \" \" + userData.zipCode;\r\n      Geocode.setApiKey(\"AIzaSyBYR-fyWSCdQ3XfZohzXX2adrSyta-qYGo\");\r\n      //Geocode.setLanguage(\"en\");\r\n      Geocode.fromAddress(fullAddress).then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          coordinates[\"lati\"] = lat;\r\n          coordinates[\"long\"] = lng;\r\n          console.log(coordinates);\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n\r\n      var heightMessage = \"No height provided\";\r\n\r\n      if (userData.heightFT !== \"\" || userData.heightIN !== \"\") {\r\n        var heightFT = userData.heightFT;\r\n        var heightIN = userData.heightIN;\r\n        if (userData.heightFT === \"\" && userData.heightIN !== \"\") {\r\n          heightFT = 0;\r\n        }\r\n        if (userData.heightFT !== \"\" && userData.heightIN === \"\") {\r\n          heightIN = 0;\r\n        }\r\n        heightMessage = heightFT + \" ft \" + heightIN + \" in\";\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <hr></hr>\r\n          <p>\r\n            <strong>Name: </strong>\r\n            {userData.firstName + \" \" + userData.lastName}\r\n          </p>\r\n          <p>\r\n            <strong>Birthday: </strong>Born on {userData.birthday}\r\n          </p>\r\n          <p>\r\n            <strong>Height: </strong>\r\n            {heightMessage}\r\n          </p>\r\n          <p>\r\n            <strong>Address: </strong>\r\n            {userData.streetAddress + \" \" + userData.streetAddressExtra + \", \" + userData.city + \", \" + userData.state + \" \" + userData.zipCode}\r\n          </p>\r\n          <p>\r\n            <strong>Education Level: </strong>I'm missing education levels. Not shown on Figma!\r\n          </p>\r\n          <p>\r\n            <strong>Email: </strong>\r\n            {userData.email}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h1>Did not receive data object inside history as its null.</h1>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" spacing={1} className={classes.root}>\r\n        <Grid item xs>\r\n          <Card className={classes.card}>\r\n            <CardHeader title=\"Results from Survey\" />\r\n            <CardContent>{renderResults()}</CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs>\r\n          <MapContainer coordinates={coordinates} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\n// Import Pages\nimport Survey from \"./Pages/Survey/Survey\";\nimport Results from \"./Pages/Results/Results\";\n\nfunction App() {\n  return (\n    <div>\n      <Route exact path=\"/\" component={Survey} />\n      <Route path=\"/survey\" component={Survey} />\n      <Route path=\"/results\" component={Results} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// HashRouter is needed for GitHub Pages to properly route users.\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}